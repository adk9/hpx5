HPX–5 Version 2.0.0 Release Notes
---------------------------------

Release date: 11/17/2015

Distributed under the Indiana University License.
(See accompanying file LICENSE.txt) 

HPX-5 is the High Performance ParalleX runtime library developed at CREST at
Indiana University. This open source, portable, and performance-oriented 
implementation is guided by the ParalleX execution model. It provides a 
programming model for parallel and distributed applications, allowing programs 
to run unmodified on systems from a single SMP to large clusters or 
supercomputers with thousands of nodes. HPX-5 supports Linux running on 
Intel x86 and Xeon Phi processors and various ARM platforms. We use HPX-5 for 
a broad range of scientific applications enabling scientists write code that 
performs and scales better than contemporary parallel runtimes.


What's new in HPX-5 v2.0.0?
----------------------------

1. Cray Aries platforms are now officially supported.

2. `hpx_run()` maybe be called multiple times within an application. This 
eases migration of legacy applications. `hpx_is_active()` is available to 
dynamically determine if execution is inside HPX-5.

3. Added percolation support. HPX-5 supports distributed GPU programming 
through experimental OpenCL support.

4. Added libfabric support to Photon. OpenFabrics Interfaces (OFI) is a 
framework focused on exporting fabric communication services to applications.

5. Added process `allreduce` and `broadcast` interface and updated the legacy
`bcast` functions to forward to process versions.

6. New attribute (`HPX_VECTORED`) has been added for actions that accept 
multiple marshaled buffers as arguments.

7. We have relaxed typing rules for continuations. In particular, 0-adic 
actions may be used as a continuation to any action---this is equivalent to 
ignoring a return value in standard C.

8. We have implemented extended work-stealing scheduling policies such as 
"hierarchical".

9. We have added support for NUMA aware topology discovery and HPX-5 worker 
thread affinity binding, e.g., hwthread, core, numa.

10. We have implemented `hpx_gas_move()` for AGAS.

11. We have added synchronous variants for some API functions, e.g., 
`hpx_gas_memcpy_sync()`, `hpx_gas_bcast_sync()`, etc.

12. Performance improvements in both SMP and distributed execution.

13. Numerous internal interface changes.

API Changes: Improvements/Enhancements
---------------------------------------

1. Extended the GAS interface (`hpx_gas_alloc` and `hpx_gas_calloc`) to 
support attributes. The attributes currently defined are: none, LB 
(load-balanced) and RO (read-only). The PGAS implementation presently 
ignores attributes.

2. Export `hpx_gas_free_action` for use as an `hpx_call` or continuation 
target.

3. Extended the `hpx_lco_set_action` and related functions to continue 
(i.e., `return`) an integer indicating if the set "triggered" the lco.

4. Normalized the order of arguments to `hpx_thread_continue_cleanup` and 
`hpx_thread_continue`.

5. Added a local array allocator equivalent to `calloc_local` but without 
zero-initialization.

Removed/Retired Features
--------------------------

1. Moved `cpi` and `heat` tutorials to examples and eliminated tutorials.

2. Removed the deprecated `--hpx-cores` option.

Bug Fixes
-----------

1. Linking tests/examples/tutorials `--with-apex` when apex is built statically now works.

Application Updates
--------------------

Mini-Apps
===========

1. Wavelet-AMR - This wavelet example solves the Euler equations for a 
blast wave in 2-D. The wavelet example comes in three flavors: serial, cilk, 
and hpx. For the cilk and hpx flavors, the serial version is also present 
in the source code to aid comparison.

2. HPCG - The High Performance Conjugate Gradient Benchmark (HPCG) is a 
new benchmark intended to complement the High-Performance Linpack (HPL) 
benchmark currently used to rank supercomputers in the TOP500 list.

Tutorial
==========

1. 1dtree - One Dimensional Tree Code. The purpose of the code is to compute 
the gravitational potential due to a collection of particles at the position 
of each particle. This is a basic portion of an N-body code which would then 
iterate this procedure with time stepping to advance the positions of the 
particles. This tutorial only covers the computation of the potential.

Known bugs & limitations in the release
-----------------------------------------

1. HPX-5 on Mac OS X only builds with default xcode toolchain. Use 
`$ ./configure --with-hwloc=contrib --with-libffi=contrib CC=clang` to 
configure. `gcc` installed with brew or port is not supported. We believe 
this is due to:
https://gcc.gnu.org/bugzilla/show_bug.cgi?format=multiple&id=60893.

2. AGAS and TBBMalloc require a C++11 compiler.

3. The AGAS implementation only works with the Isend/Irecv network, and is 
still considered experimental.

4. Clang versions prior to 3.6 (3.5.1 and earlier) contain regressions that 
trigger runtime failures in HPX.

5. The `--map-by node:pe=1` flag will be incorrectly interpreted when using 
openmpi version 1.10.0, and will spawn `#cores` HPX-5 worker threads. Use 
`--hpx-threads=1` to force 1 worker thread if necessary.

6. The SSSP variants (delta-stepping, distributed-control, KLA) in libPXGL 
are experimental. The delta-stepping variant has been tested at larger 
scales and is the most stable one (delta == 1 is the safest bet at larger 
scale).

7. `HPX_THREAD_CONTINUE` does not run C++ destructors for stack-allocated 
objects.

8. LULESH induces a performance regression with `jemalloc`, prefer 
`tbbmalloc` for it. When using `jemalloc` set `MALLOC_CONF=lg_dirty_mult:-1` 
on the command line---this resolves the performance regression but may cause 
memory exhaustion. Also use `hugetlbfs` when available.

9. Blocked distribution is unimplemented.

10. Remote `hpx_lco_get/wait` operations do not propagate errors correctly.

11. Photon CQ overrun warning is generated for large uGNI allocations.  Can 
be safely ignored for most jobs.

General Information
---------------------

If you plan to use HPX–5, we suggest starting with the latest released
version (currently HPX–5 v2.0.0) which can be downloaded from
http://hpx.crest.iu.edu/download. If you would like to work with the
cutting edge version of HPX–5, we suggest using the the `develop`
branch at https://gitlab.crest.iu.edu/extreme/hpx. While we try to
keep the develop branch stable and usable, sometimes new bugs trick
their way into the code base - be aware!

Documentation for the latest release of HPX–5 (currently v2.0.0) and
the previous versions can be accessed at
http://hpx.crest.iu.edu/documentation. The FAQ can be found at
http://hpx.crest.iu.edu/faqs_and_tutorials.

Reporting bugs
=================

In any case, if you happen to run into problems we very much encourage and 
appreciate issue reports through the issue tracker for this Gitlab project 
(https://gitlab.crest.iu.edu/extreme/hpx/issues).  

Participate in HPX-5
======================

HPX-5 is published under a liberal open-source license and has an open, 
active, and thriving developer community. Further information can be found at 
http://hpx.crest.iu.edu.

More about HPX-5
--------------------

For more information about HPX-5, including information about the latest 
release, please check out the main https://hpx.crest.iu.edu/about. If you 
have questions or comments, the HPX-5 Developer’s Mailing List is a good 
place to send them.

Subscribe your e-mail address to be notified when new releases of HPX-5 
are released using the mailing list: HPX-5 Announcements List 
http://www.crest.iu.edu/mailman/listinfo.cgi/hpx-announce.
