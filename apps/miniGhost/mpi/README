miniGhost finite-difference mini-application
Version 1.0.1

--------------------------------------
Contents of this README file:
1.	miniGhost overview
2.	miniGhost versions
3.	building miniGhost
4.	running miniGhost
5.	notes about the code
--------------------------------------

--------------------------------------
1. miniGhost overview

miniGhost is a Finite Difference mini-application which implements a difference stencil across a homogenous three dimensional domain.

Thus the kernels that it contains are:
-	computation of stencil options,
-	inter-process boundary (halo, ghost) exchange.
-	global summation of grid values.

Computation simulates heat diffusion across a homogenous domain, with Dirichlet boundary conditions.  It does not currently solve a specific problem that can be checked for correctness.  However, it can be run in a mode that does check correctness in a limited sense: the domain is initialized to 0, a heat source is applied to a single cell in the middle of the global domain,  and the grid values are summed and compared with the initial source term. This check will be meaningful until the initial heat source reaches a physical boundary, at which point the heat dissipate. Future plans call for reflective boundary conditions constructed such that the initial state must be maintained.


--------------------------------------
2. miniGhost versions:

- miniGhost_ref:
     reference version: self-contained, includes serial, MPI-parallel, and OpenMP intra-node with MPI inter-node parallelism.

- miniGhost_OpenACC:
     Designed for use on host and device-accelerated clusters such as the Cray XK6. OpenACC is used to move the stencil computation onto the GPU, and to move the halo data to and from the device during the boundary exchange.

-------------------
3. Building miniGhost:

 The default case is: cd into the 'miniGhost_ref' directory, copy the appropriate makefile from the MAKES directory,
 modify if necessary, and type 'make -f makefile'.
 This will build the MPI-parallel or serial miniGhost code.

 If successful, this will create an executable called miniGhost.x.

Special builds can be done for things like:
- no MPI
  type 'make -f makefile.gnu.serial'

Note 1:
  'make' calls the script 'capture_env' to generate MG_ENV.F, which captures platform and build information. 
 
Note 2:
  miniGhost contains support for single and double precision integers (INTEGER*4 and INTEGER*8) and floating point (REAL*4 and REAL*8). Eight-byte variables are the default. Four-byte variables for either is set as a compile time option as seen in the makefile, e.g. -D_MG_INT4 -D_MG_REAL4.

-------------------
4. Running miniGhost:

 miniGhost can be run like this:

   Serial: 
      % ./miniGhost.x

   MPI:
   % <mpi-run-command> ./miniGhost.x

 where <mpi-run-command> varies from system to system but usually looks  something like 'mpirun -np 4 ' or similar.

 Execution is then driven entirely by the default settings, as configured in default-settings.h. Options may be listed using

    % ./miniGhost.x --help

 or as seen in file MG_OPTIONS.F.

 Arguments can appear in any order.

 *** The default configuration is intended to fail as the heat source will dissipate off of the domain, meaning that the summation across grid points will be less than the initial heat source. ***

 To run the full test suite, run runtest.seral and/or runtest.mpi. The latter will probably require modification
 for the appropriate MPI launch command and machine resource management system.
-------------------
5. The code:
 The main program is located in main.c. It calls the Fortran driver procedure MINI_GHOST, which sets up the problem and calls the appropriate boundary exchange driver, currently either DRIVER_BSPMA or DRIVER_SVAF.

For a complete description of the goals, source code, and execution, see "MiniGhost: A Miniapp for Exploring Boundary Exchange Strategies Using Stencil Computations in Scientific Parallel Computing; Version 1.0", contained in file miniGhost.v1.0.pdf in the source code directory of the reference implementation.

-- End README file.

