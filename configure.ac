AC_INIT([photon], [0.1a], [photon@stout.incntre.iu.edu])
AM_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([config])
AM_INIT_AUTOMAKE

# Prevent autoconf from setting CFLAGS="-g -O2" on AC_PROG_CC
${CFLAGS=""}

AC_GNU_SOURCE
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AM_PROG_CC_C_O

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h malloc.h netdb.h netinet/in.h netinet/in_systm.h stdint.h stdlib.h string.h strings.h sys/param.h sys/queue.h sys/socket.h sys/time.h unistd.h values.h byteswap.h libkern/OSByteOrder.h linux/unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

# Checks for libraries.
AC_CHECK_LIB([m], [ceilf])
AC_CHECK_LIB([pthread], [pthread_mutex_init], THREAD_LIBS="$THREAD_LIBS -lpthread")
AC_CHECK_LIB([c_r], [pthread_mutex_init], THREAD_LIBS="$THREAD_LIBS -pthread -lc_r")
AC_CHECK_LIB([rt], [sem_init], use_rt=yes)

AM_CONDITIONAL(HAVE_LIBRT, test x$use_rt = xyes)

# Checks for typedefs, structures, and compiler characteristics.
#AC_CHECK_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_INT8_T
AC_TYPE_SIZE_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T
AC_C_CONST
AC_TYPE_PID_T

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_CHECK_FUNCS([atoll atoq gethostbyaddr gethostbyname gethostname gettimeofday inet_ntoa memset select socket strcasecmp strchr strdup strerror strlcat strlcpy strstr strtoul strtoll inet_ntop])

AC_ARG_ENABLE(debug,
	[  --enable-debug          turn on debugging],
	[CFLAGS="-g -O0 -Wall -DDEBUG ${CFLAGS}"],
	[CFLAGS="-O2 -Wall ${CFLAGS}"])


dnl Check for infiniband verbs
AC_ARG_ENABLE(rdma, AC_HELP_STRING([--disable-rdma],
		    [disable RDMA (IBV) support (default is autodetect)]),
		    [enable_rdma=$enableval],
		    [enable_rdma=try])

if test "$enable_rdma" != "no" ; then
        AH_TEMPLATE(HAVE_RDMA, Whether or not ibverbs is installed on the system)
        AC_CHECK_LIB(ibverbs, main, [
                AC_CHECK_HEADER([infiniband/verbs.h], [
                        RDMA_LIBS="-libverbs"
                        AC_SUBST(RDMA_LIBS)
                        have_rdma=yes
                ])
        ])

        if test "x$have_rdma" == "xyes"; then
                AC_DEFINE(HAVE_RDMA,, Build with RDMA support)
        else
		AC_MSG_WARN([IB/RDMA Verbs not found.  Try installing OFED or libiberbs-dev.])
	fi
fi
AM_CONDITIONAL(HAVE_RDMA, test x$have_rdma = xyes)

dnl Check for mpich2
AC_ARG_ENABLE(mpich2, AC_HELP_STRING([--disable-mpich2],
                    [disable MPICH2 support (default is autodetect)]),
                    [enable_mpich2=$enableval],
                    [enable_mpich2=try])

if test "$enable_mpich2" != "no" ; then
        AH_TEMPLATE(HAVE_MPICH2, Whether or not MPICH2 is installed on the system)
        AC_CHECK_LIB(mpich, main, [
                AC_CHECK_HEADER([mpich2/mpi.h], [
			if test -f /usr/include/mpich2/mpi.h; then
			   MPICH2_INCLUDES="/usr/include/mpich2"
			elif test -f /usr/local/include/mpich2/mpi.h; then
			   MPICH2_INCLUDES="/usr/local/include/mpich2"
			fi
                        MPICH2_LIBS="-lmpich"
                        have_mpich2=yes
                ])
        ])

        if test "x$have_mpich2" == "xyes"; then
                AC_DEFINE(HAVE_MPICH2,, Build with MPICH2 support)
		
        else
                AC_MSG_WARN([MPICH2 not found.  Please install MPICH2 to compile photon.])
	fi
fi
AM_CONDITIONAL(HAVE_MPICH2, test x$have_mpich2 = xyes)

dnl MPICH2 default for now
if test "x$have_mpich2" == "xyes"; then
   AC_SUBST(MPI_LIBS, $MPICH2_LIBS)
   AC_SUBST(MPI_INCLUDES, $MPICH2_INCLUDES)
fi

AC_CONFIG_FILES([
	Makefile
	libphoton/util/Makefile
	libphoton/src/Makefile
	test/Makefile
])
AC_OUTPUT

AC_SUBST(THREAD_LIBS)

cat << EOF
Config files successfully generated by ./configure $ac_configure_args !

  Install prefix     : $prefix
    
  To build and install, run:
     $ make
     $ make install

EOF
