// -*- C -*- ===================================================================
//  High Performance ParalleX Library (libhpx)
//
//  Copyright (c) 2013-2016, Trustees of Indiana University,
//  All rights reserved.
//
//  This software may be modified and distributed under the terms of the BSD
//  license.  See the COPYING file for details.
//
//  This software was created at the Indiana University Center for Research in
//  Extreme Scale Technologies (CREST).
// =============================================================================

/// Standard declarative trace events list, designed for multiple inclusion. Before
/// including this file #define the LIBHPX_EVENT() macro.

/// LIBHPX_EVENT(class, event, args1, ..., args5)
///
/// This generic macro can be used to create expansions for all of the macros in
/// this file.
///
/// @param     class The trace class.
/// @param     event The trace event ID.
/// @param      arg1 The first argument.
/// @param      arg2 The second argument.
/// @param      arg3 The third argument.
/// @param      arg4 The fourth argument.
/// @param      arg5 The fifth argument.

/// Parcel events
/// Parcel events mark important interactions between HPX and parcels, including
/// the creation of parcels, sending and receiving of parcels, running,
/// terminating (ending), suspending and resuming, and resending of parcels.
/// @{
LIBHPX_EVENT(PARCEL, CREATE, uint64_t, hpx_action_t, size_t, int)
LIBHPX_EVENT(PARCEL, SEND, uint64_t, hpx_action_t, size_t, hpx_addr_t, hpx_addr_t)
LIBHPX_EVENT(PARCEL, RECV, uint64_t, hpx_action_t, size_t, int, hpx_addr_t)
LIBHPX_EVENT(PARCEL, RUN, uint64_t, hpx_action_t, size_t)
LIBHPX_EVENT(PARCEL, END, uint64_t, hpx_action_t)
LIBHPX_EVENT(PARCEL, SUSPEND, uint64_t, hpx_action_t)
LIBHPX_EVENT(PARCEL, RESUME, uint64_t, hpx_action_t)
LIBHPX_EVENT(PARCEL, RESEND, uint64_t, hpx_action_t, size_t, hpx_addr_t)
/// @}

/// Network events
/// Network events include when the scheduler handles network probing and 
/// whenever PWC send/receive operations occur.
/// @{
LIBHPX_EVENT(NETWORK, PWC_SEND)
LIBHPX_EVENT(NETWORK, PWC_RECV)
LIBHPX_EVENT(NETWORK, PROBE_BEGIN)
LIBHPX_EVENT(NETWORK, PROBE_END)
LIBHPX_EVENT(NETWORK, PROGRESS_BEGIN)
LIBHPX_EVENT(NETWORK, PROGRESS_END)
/// @}

/// Scheduler events
/// Scheduler events mark when the scheduler is entered or exited as well as
/// when events affecting the LIFO queue occur.
/// @{
LIBHPX_EVENT(SCHED, WQSIZE, size_t)
LIBHPX_EVENT(SCHED, PUSH_LIFO, uint64_t)
LIBHPX_EVENT(SCHED, POP_LIFO, uint64_t)
LIBHPX_EVENT(SCHED, STEAL, uint64_t, int)
LIBHPX_EVENT(SCHED, ENTER)
LIBHPX_EVENT(SCHED, EXIT)
LIBHPX_EVENT(SCHED, WORK, int, int)
/// @}

/// LCO events
/// LCO events mark when important lco procedures occur, such as the
/// initialization, deletion, setting, resetting, or triggering of the LCO
/// occurs, and also whenever the LCO is waited on or has a parcel attached to 
/// it.
/// @{
LIBHPX_EVENT(LCO, INIT, void*, uint64_t)
LIBHPX_EVENT(LCO, DELETE, void*, uint64_t)
LIBHPX_EVENT(LCO, SET, void*, uint64_t)
LIBHPX_EVENT(LCO, RESET, void*, uint64_t)
LIBHPX_EVENT(LCO, ATTACH_PARCEL, void*, uint64_t)
LIBHPX_EVENT(LCO, WAIT, void*, uint64_t)
LIBHPX_EVENT(LCO, TRIGGER, void*, uint64_t)
/// @}

/// Process events
/// Process events mark when a new process is created, when a call is made, and
/// when a process is deleted.
/// @{
LIBHPX_EVENT(PROCESS, NEW, hpx_addr_t, hpx_addr_t)
LIBHPX_EVENT(PROCESS, CALL, hpx_addr_t, hpx_pid_t)
LIBHPX_EVENT(PROCESS, DELETE, hpx_addr_t)
/// @}

/// Memory events
/// Memory events mark when allocating or freeing any of registered memory,
/// global memory, or cyclicly allocated memory, and also marks when any of
/// these operations are begun using MEMORY_ENTER_ALLOC_FREE.
/// @{
LIBHPX_EVENT(MEMORY, REGISTERED_ALLOC, void*, size_t, size_t)
LIBHPX_EVENT(MEMORY, REGISTERED_FREE, void*)
LIBHPX_EVENT(MEMORY, GLOBAL_ALLOC, void*, size_t, size_t)
LIBHPX_EVENT(MEMORY, GLOBAL_FREE, void*)
LIBHPX_EVENT(MEMORY, CYCLIC_ALLOC, void*, size_t, size_t)
LIBHPX_EVENT(MEMORY, CYCLIC_FREE, void*)
LIBHPX_EVENT(MEMORY, ENTER_ALLOC_FREE)
/// @}

/// Scheduler timing events
/// @{

/// @}

/// Trace events
/// Trace events are used for marking events related to tracing.  At the moment 
/// this is only used when dumping trace data to file.
/// @{
LIBHPX_EVENT(TRACE, FILE_IO_BEGIN)
LIBHPX_EVENT(TRACE, FILE_IO_END)
/// @}

/// GAS events
/// GAS events mark whenever there is a GAS access or move.
/// @{
LIBHPX_EVENT(GAS, ACCESS, int, int, hpx_addr_t, size_t)
LIBHPX_EVENT(GAS, MOVE, hpx_addr_t, hpx_addr_t, hpx_addr_t)
/// @}

/// Collective events
/// Collective events mark important moments in the lifetime of process
/// collectives.  Specifically the creation or deletion of collectives, the
/// subscription or unsubscription of participants in the collective, and 
/// whenever the collective performs a join operation.
/// @{
LIBHPX_EVENT(COLLECTIVE, NEW, hpx_addr_t)
LIBHPX_EVENT(COLLECTIVE, DELETE, hpx_addr_t)
LIBHPX_EVENT(COLLECTIVE, SUBSCRIBE, hpx_addr_t, hpx_action_t, hpx_addr_t, int, int)
LIBHPX_EVENT(COLLECTIVE, UNSUBSCRIBE, hpx_addr_t, int, int)
LIBHPX_EVENT(COLLECTIVE, JOIN, hpx_addr_t, hpx_addr_t, size_t, int, int)
/// @}
