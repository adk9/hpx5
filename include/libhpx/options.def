// -*- C -*- ===================================================================
//  High Performance ParalleX Library (libhpx)
//
//  Copyright (c) 2013, Trustees of Indiana University,
//  All rights reserved.
//
//  This software may be modified and distributed under the terms of the BSD
//  license.  See the COPYING file for details.
//
//  This software was created at the Indiana University Center for Research in
//  Extreme Scale Technologies (CREST).
// =============================================================================

/// Standard declarative option list, designed for multiple inclusion. Before
/// including this file #define either the LIBHPX_OPT() macro, or one or more of
/// the type specific macros to expand as you would like.

/// LIBHPX_OPT(group, id, default, ctype)
///
/// This generic macro can be used to create expansions for all of the macros in
/// this file. It is mutually exclusive with the type-specific macros.
///
/// @param     group The option category.
/// @param        id The option symbol.
/// @param   default The default value.
/// @param     ctype The C language type for the option.

/// LIBHPX_OPT_FLAG(group, id, default)
///
/// @param     group The option category.
/// @param        id The option symbol.
/// @param   default The default value.

/// LIBHPX_OPT_SCALAR(group, id, default, ctype)
///
/// @param     group The option category.
/// @param     ctype The C type for the option.
/// @param        id The option symbol.
/// @param   default The default value.

/// LIBHPX_OPT_BITSET(group, id, default)
///
/// @param     group The option category.
/// @param        id The option symbol.
/// @param   default The default value.

/// LIBHPX_OPT_INTSET(group, id, default, term)
///
/// @param     group The option category.
/// @param        id The option symbol.
/// @param   default The default value.
/// @param      term The termination value for the set.

#ifdef LIBHPX_OPT
# if defined(LIBHPX_OPT_FLAG)
#  error LIBHPX_OPT_FLAG and LIBHPX_OPT should not be defined together
# else
#  define LIBHPX_OPT_FLAG(group, id, init) LIBHPX_OPT(group, id, init, int)
#  define _LIBHPX_OPT_FLAG_UNDEF
# endif
# if defined(LIBHPX_OPT_SCALAR)
#  error LIBHPX_OPT_SCALAR and LIBHPX_OPT should not be defined together
# else
#  define LIBHPX_OPT_SCALAR(group, id, init, ctype) LIBHPX_OPT(group, id, init, ctype)
#  define _LIBHPX_OPT_SCALAR_UNDEF
# endif
# if defined(LIBHPX_OPT_BITSET)
#  error LIBHPX_OPT_BITSET and LIBHPX_OPT should not be defined together
# else
#  define LIBHPX_OPT_BITSET(group, id, init) LIBHPX_OPT(group, id, init, uint64_t)
#  define _LIBHPX_OPT_BITSET_UNDEF
# endif
# if defined(LIBHPX_OPT_INTSET)
#  error LIBHPX_OPT_INTSET should not be defined with LIBHPX_OPT
# else
#  define LIBHPX_OPT_INTSET(group, id, init, all, none) LIBHPX_OPT(group, id, NULL, int*)
#  define _LIBHPX_OPT_INTSET_UNDEF
# endif
#else
# define LIBHPX_OPT(UNUSED1, UNUSED2, UNUSED3, UNUSED4)
# define _LIBHPX_OPT_UNDEF 1
# ifndef LIBHPX_OPT_FLAG
#  define LIBHPX_OPT_FLAG(UNUSED1, UNUSED2, UNUSED3)
#  define _LIBHPX_OPT_FLAG_UNDEF
# endif
# ifndef LIBHPX_OPT_SCALAR
#  define LIBHPX_OPT_SCALAR(UNUSED1, UNUSED2, UNUSED3, UNUSED4)
#  define _LIBHPX_OPT_SCALAR_UNDEF
# endif
# ifndef LIBHPX_OPT_BITSET
#  define LIBHPX_OPT_BITSET(UNUSED1, UNUSED2, UNUSED3)
#  define _LIBHPX_OPT_BITSET_UNDEF
# endif
# ifndef LIBHPX_OPT_INTSET
#  define LIBHPX_OPT_INTSET(UNUSED1, UNUSED2, UNUSED3, UNUSED4, UNUSED5)
#  define _LIBHPX_OPT_INTSET_UNDEF
# endif
#endif

/// Flag options
/// @{
LIBHPX_OPT_FLAG(hpx, statistics, 1)
LIBHPX_OPT_FLAG(dbg, mprotectstacks, 0)
LIBHPX_OPT_FLAG(dbg, waitonabort, 0)
/// @}

/// Scalar options
/// @{
LIBHPX_OPT_SCALAR(hpx, cores, 0, int)
LIBHPX_OPT_SCALAR(hpx, threads, 0, int)
LIBHPX_OPT_SCALAR(hpx, backoffmax, 1024, unsigned)
LIBHPX_OPT_SCALAR(hpx, stacksize, 32768, unsigned)
LIBHPX_OPT_SCALAR(hpx, heapsize, 1lu << 30, size_t)
LIBHPX_OPT_SCALAR(hpx, wfthreshold, UINT32_MAX, uint32_t)
LIBHPX_OPT_SCALAR(hpx, gas, HPX_GAS_PGAS, hpx_gas_t)
LIBHPX_OPT_SCALAR(hpx, boot, HPX_BOOT_DEFAULT, hpx_boot_t)
LIBHPX_OPT_SCALAR(hpx, transport, HPX_TRANSPORT_DEFAULT, hpx_transport_t)
LIBHPX_OPT_SCALAR(hpx, network, LIBHPX_NETWORK_DEFAULT, libhpx_network_t)
LIBHPX_OPT_SCALAR(hpx, sendlimit, 0, uint32_t)
LIBHPX_OPT_SCALAR(hpx, recvlimit, 0, uint32_t)
LIBHPX_OPT_SCALAR(pwc, parcelbuffersize, 1lu << 16, size_t)
LIBHPX_OPT_SCALAR(pwc, parceleagerlimit, 1lu << 13, size_t)
/// @}

/// Set options that can be stored in a dense bit vector.
/// @{
LIBHPX_OPT_BITSET(hpx, loglevel, HPX_LOG_DEFAULT)
LIBHPX_OPT_BITSET(hpx, traceclasses, 0)
/// @}

/// Set options that need to be stored as a sparse integer set.
/// @{
LIBHPX_OPT_INTSET(hpx, logat, HPX_LOCALITY_ALL, HPX_LOCALITY_ALL, HPX_LOCALITY_NONE)
LIBHPX_OPT_INTSET(hpx, waitat, HPX_LOCALITY_NONE, HPX_LOCALITY_ALL, HPX_LOCALITY_NONE)
/// @}

#ifdef _LIBHPX_OPT_INTSET_UNDEF
# undef _LIBHPX_OPT_INTSET_UNDEF
# undef LIBHPX_OPT_INTSET
#endif

#ifdef _LIBHPX_OPT_BITSET_UNDEF
# undef _LIBHPX_OPT_BITSET_UNDEF
# undef LIBHPX_OPT_BITSET
#endif

#ifdef _LIBHPX_OPT_SCALAR_UNDEF
# undef _LIBHPX_OPT_SCALAR_UNDEF
# undef LIBHPX_OPT_SCALAR
#endif

#ifdef _LIBHPX_OPT_FLAG_UNDEF
# undef _LIBHPX_OPT_FLAG_UNDEF
# undef LIBHPX_OPT_FLAG
#endif

#ifdef _LIBHPX_OPT_UNDEF
# undef _LIBHPX_OPT_UNDEF
# undef LIBHPX_OPT
#endif
