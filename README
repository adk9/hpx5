HPX5
+++++++++
Welcome to the HPX runtime system library! In order to get started with HPX, you first need to know some basic information and how to go about using it. This document discusses how to get up and running quickly with the HPX Runtime System. Everything from unpacking and compilation of the distribution to execution of some tools.

Building and Running a network-capable HPX
========================================== 
There are several pre-requisites to successfully configure and run HPX.

Requirements
-------------------------
* GCC 4.8.4 or newer (Tested with 4.8.4, 4.9.1, 4.9.2)
* GNU Make 3.81+    
* autoconf 2.6.9     (only required for developer builds)
* automake 1.15      (only required for developer builds)
* GNU M4 1.4.17      (only required for developer builds)
* libtool 2.4.6      (only required for developer builds)
* pkg-config         (only required for developer builds)
* MPI                (optional - Tested with 1.6.3, 1.6.5, 1.8.1, 1.8.4 MPICH 3.0.4, mvapich2/2.0b (Stampede))
* doxygen            (optional)
* Photon             (embedded with HPX)
* jemalloc           (embedded with HPX)
* hwloc              (embedded with HPX)
* libffi             (embedded with HPX)
* Uthash             (embedded with HPX)
* Valgrind           (embedded with HPX)

HPX can build and run successfully without any network backend, but at
present, MPI or Photon is required for networking by HPX. Photon can
take advantage of RDMA over IB resulting in better performance.

**The latest autotools can be installed by using setup_autotools.sh in scripts folder. The script takes an path to install autotools to. After installing autotools, be sure to update your PATH variable. Only after the above steps should the user run ./bootstrap.**

Bootstrapping
--------------------------
**Note: ./bootstrap should not be used with release tarballs.**
 
HPX provides a bootstrap script in its build. In the HPX directory run the bootstrap script using

$ ./bootstrap
Bootstrap is a bash script that generate the initialization required to create a configure script when using GNU autotools. This calls the autoreconf.

Building without MPI enables the SMP bootstrapper. This allows you to run HPX on a single node. However, if you launch HPX with –np > 1 then either MPI / Photon transport should be enabled which is detailed in next section.

Configuration
--------------------------
The number of HPX configuration supports to use ‘pkg-config’ to look for installed packages. In particular, if your compilation environment requires explicit paths to MPI, you should compile --with-mpi=ompi, mcapich2, etc

See ‘./configure --help’ for further details.

HPX Network Transports
**************************
HPX can build and run successfully without any network backend, but at present, MPI or Photon is required for networking by HPX.

HPX can be built with one, both, or none of the network transports depending on application needs. Each transport is runtime configurable. MPI and PMI are currently used as job launchers and bootstrap mechanism for HPX.

Note that if you are building with Photon, the libraries for the given network interconnect you are targeting need to be present on the build system. The two supported interconnects are InfiniBand (libibverbs and librdmacm) and Cray's GEMINI and ARIES via uGNI (libugni). You may build with IBV and/or uGNI support on a workstation where the development packages are installed, but launching an HPX application with Photon requires that the actual network devices be present so the library can initialize.

If you build with Photon and/or MPI on a system without networking, you may still use the SMP transport to run applications that are not distributed.

Configuring on InfiniBand Systems
******************************************
Configuring with MPI
------------------------------------------
$ ./configure --prefix=/path/to/install --with-mpi=ompi

On stampede use
$ module load intel/14.0.1.106
$ LDFLAGS=-L/opt/ofed/lib64 CPPFLAGS=-I/opt/ofed/include ./configure --with-mpi CC=mpicc

Configuring with Photon
------------------------------------------
The Photon transport is included in HPX within the contrib directory. To configure HPX with Photon use option --enable-photon
./configure --prefix=/path/to/install/ --with-mpi=ompi --enable-photon

Configuring on CRAY Systems
******************************************
$ module unload PrgEnv-cray
$ module unload PrgEnv-intel/5.2.40
$ module load PrgEnv-gnu
$ setenv CRAYPE_LINK_TYPE dynamic
$ ./configure --prefix=/path/to/install/ CC=cc

Configuring with MPI on cray
------------------------------------------
If you have MPICH installed, you need to specify: ‘$ ./configure --prefix=/path/to/install --with-mpi=mpich CC=cc’ will instruct ‘configure’ to look for ‘mpich.pc’.

Configuring with Photon on cray
------------------------------------------
$ ./configure --prefix=/path/to/install/ CC=cc --enable-photon --with-pmi --with-mpi HPX_PHOTON_CARGS="--with-ugni"

Configuring with the test-suite enabled
******************************************
* To build and run the unit and performance testsuite enabled:

$ ./configure  --enable-testsuite --with-tests-cmd="mpirun -np 2" 
$ make check
--with-tests-cmd is used to specify the application launch command on various systems. This has to be set appropriately for your system.

To complete the build and install use:
******************************************
make
make install

Running
------------------------------------------
The Photon default is to use the first detected IB device and active port. This behavior can be overridden with the following environment variable:

$ export HPX_PHOTON_IBDEV="mlx4_0"
This string also acts as a device filter. For example,

Device names can be retrieved with ibv_devinfo on systems with IB Verbs support. If HPX_PHOTON_IBDEV is set to be blank, Photon will try to automatically select the right device.

(These parameters can also be set at run time using the command line option --hpx-photon-ibdev=<...>.)

The Photon default backend is also set to verbs. On BigRed2, or any other Cray system with a uGNI-supported interconnect, set the following environment variable:

$ export HPX_PHOTON_BACKEND=ugni
OR, use --hpx-photon-backend=ugni as a command line flag.

In addition, for huge pages builds, the size of huge pages can be controlled:

$ export HUGETLB_DEFAULT_PAGE_SIZE=64M
The list of supported sizes can be obtained as follows:

$ module avail craype-hugepages

HPX provides runtime options that can be specified on the command line or in the environment. The list of options can be obtained from any HPX program by adding --help option.

HPX programs can be run using any of the MPI or PMI launchers such as mpirun/mpiexec.
E.g. to run the pingpong example,

$ mpirun -np 2 examples/pingpong 10 -m -v

Detailed build instructions can be found at Getting started with HPX Runtime Systems in docs folder.
